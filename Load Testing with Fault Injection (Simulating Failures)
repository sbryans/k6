import http from 'k6/http';
import { check, sleep } from 'k6';

export let options = {
    vus: 200,
    duration: '5m',
    thresholds: {
        http_req_duration: ['p(99)<3000'], // 99% of requests must complete in less than 3s
        'http_req_failed{type:failure}': ['rate<0.05'], // Less than 5% should fail
    },
};

export default function () {
    // Inject random network issues by simulating timeouts
    const timeoutChance = Math.random();
    const responseDelay = timeoutChance > 0.9 ? 5000 : 200;

    let res = http.get(`https://test-api.com/data?delay=${responseDelay}`);

    // Handle failures
    check(res, {
        'status is 200': (r) => r.status === 200,
        'request did not time out': (r) => timeoutChance <= 0.9 || r.timings.duration < 4000,
    });

    sleep(1);
}
